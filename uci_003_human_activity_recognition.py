#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import urllib.request
import io
import zipfile
import pandas # install pandas by "pip install pandas", or install Anaconda distribution (https://www.anaconda.com/)

# Warning: the data processing techniques shown below are just for concept explanation, which are not best-proctices

# data set repository
# https://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones

# if the file is on your local device, change url_data_train into local file path, e.g., 'â€ªD:\local_file.data'
url_data_train = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI%20HAR%20Dataset.zip'

def download_file(url):
    resp = urllib.request.urlopen(url)
    if resp.status != 200:
        resp.close()
        raise ValueError('Error: {0}'.format(resp.reason))

    print('\rStarted', end = '\r')
    content_length = resp.getheader('Content-Length')
    if content_length is None:
        content_length = '(total: unknown)'
    else:
        content_length = int(content_length)
        if content_length < 1024:
            content_length_str = '(total %.0f Bytes)' % content_length
        elif content_length < 1024 * 1024:
            content_length_str = '(total %.0f KB)' % (content_length / 1024)
        else:
            content_length_str = '(total %.1f MB)' % (content_length / 1024 / 1024)

    total = bytes()
    while not resp.isclosed():
        total += resp.read(10 * 1024)
        if len(total) < 1024:
            print(('\rDownloaded: %.0f Bytes ' % len(total)) + content_length_str + '  ', end = '\r')
        if len(total) < 1024 * 1024:
            print(('\rDownloaded: %.0f KB ' % (len(total) / 1024)) + content_length_str + '  ', end = '\r')
        else:
            print(('\rDownloaded: %.1f MB ' % (len(total) / 1024 / 1024)) + content_length_str + '  ', end = '\r')

    print()
    return io.BytesIO(total)

# download data from UCI Machine Learning Repository
data_train = download_file(url_data_train) if url_data_train.startswith('http') else url_data_train

columns = [
    '001_tBodyAcc-mean()-X',
    '002_tBodyAcc-mean()-Y',
    '003_tBodyAcc-mean()-Z',
    '004_tBodyAcc-std()-X',
    '005_tBodyAcc-std()-Y',
    '006_tBodyAcc-std()-Z',
    '007_tBodyAcc-mad()-X',
    '008_tBodyAcc-mad()-Y',
    '009_tBodyAcc-mad()-Z',
    '010_tBodyAcc-max()-X',
    '011_tBodyAcc-max()-Y',
    '012_tBodyAcc-max()-Z',
    '013_tBodyAcc-min()-X',
    '014_tBodyAcc-min()-Y',
    '015_tBodyAcc-min()-Z',
    '016_tBodyAcc-sma()',
    '017_tBodyAcc-energy()-X',
    '018_tBodyAcc-energy()-Y',
    '019_tBodyAcc-energy()-Z',
    '020_tBodyAcc-iqr()-X',
    '021_tBodyAcc-iqr()-Y',
    '022_tBodyAcc-iqr()-Z',
    '023_tBodyAcc-entropy()-X',
    '024_tBodyAcc-entropy()-Y',
    '025_tBodyAcc-entropy()-Z',
    '026_tBodyAcc-arCoeff()-X,1',
    '027_tBodyAcc-arCoeff()-X,2',
    '028_tBodyAcc-arCoeff()-X,3',
    '029_tBodyAcc-arCoeff()-X,4',
    '030_tBodyAcc-arCoeff()-Y,1',
    '031_tBodyAcc-arCoeff()-Y,2',
    '032_tBodyAcc-arCoeff()-Y,3',
    '033_tBodyAcc-arCoeff()-Y,4',
    '034_tBodyAcc-arCoeff()-Z,1',
    '035_tBodyAcc-arCoeff()-Z,2',
    '036_tBodyAcc-arCoeff()-Z,3',
    '037_tBodyAcc-arCoeff()-Z,4',
    '038_tBodyAcc-correlation()-X,Y',
    '039_tBodyAcc-correlation()-X,Z',
    '040_tBodyAcc-correlation()-Y,Z',
    '041_tGravityAcc-mean()-X',
    '042_tGravityAcc-mean()-Y',
    '043_tGravityAcc-mean()-Z',
    '044_tGravityAcc-std()-X',
    '045_tGravityAcc-std()-Y',
    '046_tGravityAcc-std()-Z',
    '047_tGravityAcc-mad()-X',
    '048_tGravityAcc-mad()-Y',
    '049_tGravityAcc-mad()-Z',
    '050_tGravityAcc-max()-X',
    '051_tGravityAcc-max()-Y',
    '052_tGravityAcc-max()-Z',
    '053_tGravityAcc-min()-X',
    '054_tGravityAcc-min()-Y',
    '055_tGravityAcc-min()-Z',
    '056_tGravityAcc-sma()',
    '057_tGravityAcc-energy()-X',
    '058_tGravityAcc-energy()-Y',
    '059_tGravityAcc-energy()-Z',
    '060_tGravityAcc-iqr()-X',
    '061_tGravityAcc-iqr()-Y',
    '062_tGravityAcc-iqr()-Z',
    '063_tGravityAcc-entropy()-X',
    '064_tGravityAcc-entropy()-Y',
    '065_tGravityAcc-entropy()-Z',
    '066_tGravityAcc-arCoeff()-X,1',
    '067_tGravityAcc-arCoeff()-X,2',
    '068_tGravityAcc-arCoeff()-X,3',
    '069_tGravityAcc-arCoeff()-X,4',
    '070_tGravityAcc-arCoeff()-Y,1',
    '071_tGravityAcc-arCoeff()-Y,2',
    '072_tGravityAcc-arCoeff()-Y,3',
    '073_tGravityAcc-arCoeff()-Y,4',
    '074_tGravityAcc-arCoeff()-Z,1',
    '075_tGravityAcc-arCoeff()-Z,2',
    '076_tGravityAcc-arCoeff()-Z,3',
    '077_tGravityAcc-arCoeff()-Z,4',
    '078_tGravityAcc-correlation()-X,Y',
    '079_tGravityAcc-correlation()-X,Z',
    '080_tGravityAcc-correlation()-Y,Z',
    '081_tBodyAccJerk-mean()-X',
    '082_tBodyAccJerk-mean()-Y',
    '083_tBodyAccJerk-mean()-Z',
    '084_tBodyAccJerk-std()-X',
    '085_tBodyAccJerk-std()-Y',
    '086_tBodyAccJerk-std()-Z',
    '087_tBodyAccJerk-mad()-X',
    '088_tBodyAccJerk-mad()-Y',
    '089_tBodyAccJerk-mad()-Z',
    '090_tBodyAccJerk-max()-X',
    '091_tBodyAccJerk-max()-Y',
    '092_tBodyAccJerk-max()-Z',
    '093_tBodyAccJerk-min()-X',
    '094_tBodyAccJerk-min()-Y',
    '095_tBodyAccJerk-min()-Z',
    '096_tBodyAccJerk-sma()',
    '097_tBodyAccJerk-energy()-X',
    '098_tBodyAccJerk-energy()-Y',
    '099_tBodyAccJerk-energy()-Z',
    '100_tBodyAccJerk-iqr()-X',
    '101_tBodyAccJerk-iqr()-Y',
    '102_tBodyAccJerk-iqr()-Z',
    '103_tBodyAccJerk-entropy()-X',
    '104_tBodyAccJerk-entropy()-Y',
    '105_tBodyAccJerk-entropy()-Z',
    '106_tBodyAccJerk-arCoeff()-X,1',
    '107_tBodyAccJerk-arCoeff()-X,2',
    '108_tBodyAccJerk-arCoeff()-X,3',
    '109_tBodyAccJerk-arCoeff()-X,4',
    '110_tBodyAccJerk-arCoeff()-Y,1',
    '111_tBodyAccJerk-arCoeff()-Y,2',
    '112_tBodyAccJerk-arCoeff()-Y,3',
    '113_tBodyAccJerk-arCoeff()-Y,4',
    '114_tBodyAccJerk-arCoeff()-Z,1',
    '115_tBodyAccJerk-arCoeff()-Z,2',
    '116_tBodyAccJerk-arCoeff()-Z,3',
    '117_tBodyAccJerk-arCoeff()-Z,4',
    '118_tBodyAccJerk-correlation()-X,Y',
    '119_tBodyAccJerk-correlation()-X,Z',
    '120_tBodyAccJerk-correlation()-Y,Z',
    '121_tBodyGyro-mean()-X',
    '122_tBodyGyro-mean()-Y',
    '123_tBodyGyro-mean()-Z',
    '124_tBodyGyro-std()-X',
    '125_tBodyGyro-std()-Y',
    '126_tBodyGyro-std()-Z',
    '127_tBodyGyro-mad()-X',
    '128_tBodyGyro-mad()-Y',
    '129_tBodyGyro-mad()-Z',
    '130_tBodyGyro-max()-X',
    '131_tBodyGyro-max()-Y',
    '132_tBodyGyro-max()-Z',
    '133_tBodyGyro-min()-X',
    '134_tBodyGyro-min()-Y',
    '135_tBodyGyro-min()-Z',
    '136_tBodyGyro-sma()',
    '137_tBodyGyro-energy()-X',
    '138_tBodyGyro-energy()-Y',
    '139_tBodyGyro-energy()-Z',
    '140_tBodyGyro-iqr()-X',
    '141_tBodyGyro-iqr()-Y',
    '142_tBodyGyro-iqr()-Z',
    '143_tBodyGyro-entropy()-X',
    '144_tBodyGyro-entropy()-Y',
    '145_tBodyGyro-entropy()-Z',
    '146_tBodyGyro-arCoeff()-X,1',
    '147_tBodyGyro-arCoeff()-X,2',
    '148_tBodyGyro-arCoeff()-X,3',
    '149_tBodyGyro-arCoeff()-X,4',
    '150_tBodyGyro-arCoeff()-Y,1',
    '151_tBodyGyro-arCoeff()-Y,2',
    '152_tBodyGyro-arCoeff()-Y,3',
    '153_tBodyGyro-arCoeff()-Y,4',
    '154_tBodyGyro-arCoeff()-Z,1',
    '155_tBodyGyro-arCoeff()-Z,2',
    '156_tBodyGyro-arCoeff()-Z,3',
    '157_tBodyGyro-arCoeff()-Z,4',
    '158_tBodyGyro-correlation()-X,Y',
    '159_tBodyGyro-correlation()-X,Z',
    '160_tBodyGyro-correlation()-Y,Z',
    '161_tBodyGyroJerk-mean()-X',
    '162_tBodyGyroJerk-mean()-Y',
    '163_tBodyGyroJerk-mean()-Z',
    '164_tBodyGyroJerk-std()-X',
    '165_tBodyGyroJerk-std()-Y',
    '166_tBodyGyroJerk-std()-Z',
    '167_tBodyGyroJerk-mad()-X',
    '168_tBodyGyroJerk-mad()-Y',
    '169_tBodyGyroJerk-mad()-Z',
    '170_tBodyGyroJerk-max()-X',
    '171_tBodyGyroJerk-max()-Y',
    '172_tBodyGyroJerk-max()-Z',
    '173_tBodyGyroJerk-min()-X',
    '174_tBodyGyroJerk-min()-Y',
    '175_tBodyGyroJerk-min()-Z',
    '176_tBodyGyroJerk-sma()',
    '177_tBodyGyroJerk-energy()-X',
    '178_tBodyGyroJerk-energy()-Y',
    '179_tBodyGyroJerk-energy()-Z',
    '180_tBodyGyroJerk-iqr()-X',
    '181_tBodyGyroJerk-iqr()-Y',
    '182_tBodyGyroJerk-iqr()-Z',
    '183_tBodyGyroJerk-entropy()-X',
    '184_tBodyGyroJerk-entropy()-Y',
    '185_tBodyGyroJerk-entropy()-Z',
    '186_tBodyGyroJerk-arCoeff()-X,1',
    '187_tBodyGyroJerk-arCoeff()-X,2',
    '188_tBodyGyroJerk-arCoeff()-X,3',
    '189_tBodyGyroJerk-arCoeff()-X,4',
    '190_tBodyGyroJerk-arCoeff()-Y,1',
    '191_tBodyGyroJerk-arCoeff()-Y,2',
    '192_tBodyGyroJerk-arCoeff()-Y,3',
    '193_tBodyGyroJerk-arCoeff()-Y,4',
    '194_tBodyGyroJerk-arCoeff()-Z,1',
    '195_tBodyGyroJerk-arCoeff()-Z,2',
    '196_tBodyGyroJerk-arCoeff()-Z,3',
    '197_tBodyGyroJerk-arCoeff()-Z,4',
    '198_tBodyGyroJerk-correlation()-X,Y',
    '199_tBodyGyroJerk-correlation()-X,Z',
    '200_tBodyGyroJerk-correlation()-Y,Z',
    '201_tBodyAccMag-mean()',
    '202_tBodyAccMag-std()',
    '203_tBodyAccMag-mad()',
    '204_tBodyAccMag-max()',
    '205_tBodyAccMag-min()',
    '206_tBodyAccMag-sma()',
    '207_tBodyAccMag-energy()',
    '208_tBodyAccMag-iqr()',
    '209_tBodyAccMag-entropy()',
    '210_tBodyAccMag-arCoeff()1',
    '211_tBodyAccMag-arCoeff()2',
    '212_tBodyAccMag-arCoeff()3',
    '213_tBodyAccMag-arCoeff()4',
    '214_tGravityAccMag-mean()',
    '215_tGravityAccMag-std()',
    '216_tGravityAccMag-mad()',
    '217_tGravityAccMag-max()',
    '218_tGravityAccMag-min()',
    '219_tGravityAccMag-sma()',
    '220_tGravityAccMag-energy()',
    '221_tGravityAccMag-iqr()',
    '222_tGravityAccMag-entropy()',
    '223_tGravityAccMag-arCoeff()1',
    '224_tGravityAccMag-arCoeff()2',
    '225_tGravityAccMag-arCoeff()3',
    '226_tGravityAccMag-arCoeff()4',
    '227_tBodyAccJerkMag-mean()',
    '228_tBodyAccJerkMag-std()',
    '229_tBodyAccJerkMag-mad()',
    '230_tBodyAccJerkMag-max()',
    '231_tBodyAccJerkMag-min()',
    '232_tBodyAccJerkMag-sma()',
    '233_tBodyAccJerkMag-energy()',
    '234_tBodyAccJerkMag-iqr()',
    '235_tBodyAccJerkMag-entropy()',
    '236_tBodyAccJerkMag-arCoeff()1',
    '237_tBodyAccJerkMag-arCoeff()2',
    '238_tBodyAccJerkMag-arCoeff()3',
    '239_tBodyAccJerkMag-arCoeff()4',
    '240_tBodyGyroMag-mean()',
    '241_tBodyGyroMag-std()',
    '242_tBodyGyroMag-mad()',
    '243_tBodyGyroMag-max()',
    '244_tBodyGyroMag-min()',
    '245_tBodyGyroMag-sma()',
    '246_tBodyGyroMag-energy()',
    '247_tBodyGyroMag-iqr()',
    '248_tBodyGyroMag-entropy()',
    '249_tBodyGyroMag-arCoeff()1',
    '250_tBodyGyroMag-arCoeff()2',
    '251_tBodyGyroMag-arCoeff()3',
    '252_tBodyGyroMag-arCoeff()4',
    '253_tBodyGyroJerkMag-mean()',
    '254_tBodyGyroJerkMag-std()',
    '255_tBodyGyroJerkMag-mad()',
    '256_tBodyGyroJerkMag-max()',
    '257_tBodyGyroJerkMag-min()',
    '258_tBodyGyroJerkMag-sma()',
    '259_tBodyGyroJerkMag-energy()',
    '260_tBodyGyroJerkMag-iqr()',
    '261_tBodyGyroJerkMag-entropy()',
    '262_tBodyGyroJerkMag-arCoeff()1',
    '263_tBodyGyroJerkMag-arCoeff()2',
    '264_tBodyGyroJerkMag-arCoeff()3',
    '265_tBodyGyroJerkMag-arCoeff()4',
    '266_fBodyAcc-mean()-X',
    '267_fBodyAcc-mean()-Y',
    '268_fBodyAcc-mean()-Z',
    '269_fBodyAcc-std()-X',
    '270_fBodyAcc-std()-Y',
    '271_fBodyAcc-std()-Z',
    '272_fBodyAcc-mad()-X',
    '273_fBodyAcc-mad()-Y',
    '274_fBodyAcc-mad()-Z',
    '275_fBodyAcc-max()-X',
    '276_fBodyAcc-max()-Y',
    '277_fBodyAcc-max()-Z',
    '278_fBodyAcc-min()-X',
    '279_fBodyAcc-min()-Y',
    '280_fBodyAcc-min()-Z',
    '281_fBodyAcc-sma()',
    '282_fBodyAcc-energy()-X',
    '283_fBodyAcc-energy()-Y',
    '284_fBodyAcc-energy()-Z',
    '285_fBodyAcc-iqr()-X',
    '286_fBodyAcc-iqr()-Y',
    '287_fBodyAcc-iqr()-Z',
    '288_fBodyAcc-entropy()-X',
    '289_fBodyAcc-entropy()-Y',
    '290_fBodyAcc-entropy()-Z',
    '291_fBodyAcc-maxInds-X',
    '292_fBodyAcc-maxInds-Y',
    '293_fBodyAcc-maxInds-Z',
    '294_fBodyAcc-meanFreq()-X',
    '295_fBodyAcc-meanFreq()-Y',
    '296_fBodyAcc-meanFreq()-Z',
    '297_fBodyAcc-skewness()-X',
    '298_fBodyAcc-kurtosis()-X',
    '299_fBodyAcc-skewness()-Y',
    '300_fBodyAcc-kurtosis()-Y',
    '301_fBodyAcc-skewness()-Z',
    '302_fBodyAcc-kurtosis()-Z',
    '303_fBodyAcc-bandsEnergy()-1,8',
    '304_fBodyAcc-bandsEnergy()-9,16',
    '305_fBodyAcc-bandsEnergy()-17,24',
    '306_fBodyAcc-bandsEnergy()-25,32',
    '307_fBodyAcc-bandsEnergy()-33,40',
    '308_fBodyAcc-bandsEnergy()-41,48',
    '309_fBodyAcc-bandsEnergy()-49,56',
    '310_fBodyAcc-bandsEnergy()-57,64',
    '311_fBodyAcc-bandsEnergy()-1,16',
    '312_fBodyAcc-bandsEnergy()-17,32',
    '313_fBodyAcc-bandsEnergy()-33,48',
    '314_fBodyAcc-bandsEnergy()-49,64',
    '315_fBodyAcc-bandsEnergy()-1,24',
    '316_fBodyAcc-bandsEnergy()-25,48',
    '317_fBodyAcc-bandsEnergy()-1,8',
    '318_fBodyAcc-bandsEnergy()-9,16',
    '319_fBodyAcc-bandsEnergy()-17,24',
    '320_fBodyAcc-bandsEnergy()-25,32',
    '321_fBodyAcc-bandsEnergy()-33,40',
    '322_fBodyAcc-bandsEnergy()-41,48',
    '323_fBodyAcc-bandsEnergy()-49,56',
    '324_fBodyAcc-bandsEnergy()-57,64',
    '325_fBodyAcc-bandsEnergy()-1,16',
    '326_fBodyAcc-bandsEnergy()-17,32',
    '327_fBodyAcc-bandsEnergy()-33,48',
    '328_fBodyAcc-bandsEnergy()-49,64',
    '329_fBodyAcc-bandsEnergy()-1,24',
    '330_fBodyAcc-bandsEnergy()-25,48',
    '331_fBodyAcc-bandsEnergy()-1,8',
    '332_fBodyAcc-bandsEnergy()-9,16',
    '333_fBodyAcc-bandsEnergy()-17,24',
    '334_fBodyAcc-bandsEnergy()-25,32',
    '335_fBodyAcc-bandsEnergy()-33,40',
    '336_fBodyAcc-bandsEnergy()-41,48',
    '337_fBodyAcc-bandsEnergy()-49,56',
    '338_fBodyAcc-bandsEnergy()-57,64',
    '339_fBodyAcc-bandsEnergy()-1,16',
    '340_fBodyAcc-bandsEnergy()-17,32',
    '341_fBodyAcc-bandsEnergy()-33,48',
    '342_fBodyAcc-bandsEnergy()-49,64',
    '343_fBodyAcc-bandsEnergy()-1,24',
    '344_fBodyAcc-bandsEnergy()-25,48',
    '345_fBodyAccJerk-mean()-X',
    '346_fBodyAccJerk-mean()-Y',
    '347_fBodyAccJerk-mean()-Z',
    '348_fBodyAccJerk-std()-X',
    '349_fBodyAccJerk-std()-Y',
    '350_fBodyAccJerk-std()-Z',
    '351_fBodyAccJerk-mad()-X',
    '352_fBodyAccJerk-mad()-Y',
    '353_fBodyAccJerk-mad()-Z',
    '354_fBodyAccJerk-max()-X',
    '355_fBodyAccJerk-max()-Y',
    '356_fBodyAccJerk-max()-Z',
    '357_fBodyAccJerk-min()-X',
    '358_fBodyAccJerk-min()-Y',
    '359_fBodyAccJerk-min()-Z',
    '360_fBodyAccJerk-sma()',
    '361_fBodyAccJerk-energy()-X',
    '362_fBodyAccJerk-energy()-Y',
    '363_fBodyAccJerk-energy()-Z',
    '364_fBodyAccJerk-iqr()-X',
    '365_fBodyAccJerk-iqr()-Y',
    '366_fBodyAccJerk-iqr()-Z',
    '367_fBodyAccJerk-entropy()-X',
    '368_fBodyAccJerk-entropy()-Y',
    '369_fBodyAccJerk-entropy()-Z',
    '370_fBodyAccJerk-maxInds-X',
    '371_fBodyAccJerk-maxInds-Y',
    '372_fBodyAccJerk-maxInds-Z',
    '373_fBodyAccJerk-meanFreq()-X',
    '374_fBodyAccJerk-meanFreq()-Y',
    '375_fBodyAccJerk-meanFreq()-Z',
    '376_fBodyAccJerk-skewness()-X',
    '377_fBodyAccJerk-kurtosis()-X',
    '378_fBodyAccJerk-skewness()-Y',
    '379_fBodyAccJerk-kurtosis()-Y',
    '380_fBodyAccJerk-skewness()-Z',
    '381_fBodyAccJerk-kurtosis()-Z',
    '382_fBodyAccJerk-bandsEnergy()-1,8',
    '383_fBodyAccJerk-bandsEnergy()-9,16',
    '384_fBodyAccJerk-bandsEnergy()-17,24',
    '385_fBodyAccJerk-bandsEnergy()-25,32',
    '386_fBodyAccJerk-bandsEnergy()-33,40',
    '387_fBodyAccJerk-bandsEnergy()-41,48',
    '388_fBodyAccJerk-bandsEnergy()-49,56',
    '389_fBodyAccJerk-bandsEnergy()-57,64',
    '390_fBodyAccJerk-bandsEnergy()-1,16',
    '391_fBodyAccJerk-bandsEnergy()-17,32',
    '392_fBodyAccJerk-bandsEnergy()-33,48',
    '393_fBodyAccJerk-bandsEnergy()-49,64',
    '394_fBodyAccJerk-bandsEnergy()-1,24',
    '395_fBodyAccJerk-bandsEnergy()-25,48',
    '396_fBodyAccJerk-bandsEnergy()-1,8',
    '397_fBodyAccJerk-bandsEnergy()-9,16',
    '398_fBodyAccJerk-bandsEnergy()-17,24',
    '399_fBodyAccJerk-bandsEnergy()-25,32',
    '400_fBodyAccJerk-bandsEnergy()-33,40',
    '401_fBodyAccJerk-bandsEnergy()-41,48',
    '402_fBodyAccJerk-bandsEnergy()-49,56',
    '403_fBodyAccJerk-bandsEnergy()-57,64',
    '404_fBodyAccJerk-bandsEnergy()-1,16',
    '405_fBodyAccJerk-bandsEnergy()-17,32',
    '406_fBodyAccJerk-bandsEnergy()-33,48',
    '407_fBodyAccJerk-bandsEnergy()-49,64',
    '408_fBodyAccJerk-bandsEnergy()-1,24',
    '409_fBodyAccJerk-bandsEnergy()-25,48',
    '410_fBodyAccJerk-bandsEnergy()-1,8',
    '411_fBodyAccJerk-bandsEnergy()-9,16',
    '412_fBodyAccJerk-bandsEnergy()-17,24',
    '413_fBodyAccJerk-bandsEnergy()-25,32',
    '414_fBodyAccJerk-bandsEnergy()-33,40',
    '415_fBodyAccJerk-bandsEnergy()-41,48',
    '416_fBodyAccJerk-bandsEnergy()-49,56',
    '417_fBodyAccJerk-bandsEnergy()-57,64',
    '418_fBodyAccJerk-bandsEnergy()-1,16',
    '419_fBodyAccJerk-bandsEnergy()-17,32',
    '420_fBodyAccJerk-bandsEnergy()-33,48',
    '421_fBodyAccJerk-bandsEnergy()-49,64',
    '422_fBodyAccJerk-bandsEnergy()-1,24',
    '423_fBodyAccJerk-bandsEnergy()-25,48',
    '424_fBodyGyro-mean()-X',
    '425_fBodyGyro-mean()-Y',
    '426_fBodyGyro-mean()-Z',
    '427_fBodyGyro-std()-X',
    '428_fBodyGyro-std()-Y',
    '429_fBodyGyro-std()-Z',
    '430_fBodyGyro-mad()-X',
    '431_fBodyGyro-mad()-Y',
    '432_fBodyGyro-mad()-Z',
    '433_fBodyGyro-max()-X',
    '434_fBodyGyro-max()-Y',
    '435_fBodyGyro-max()-Z',
    '436_fBodyGyro-min()-X',
    '437_fBodyGyro-min()-Y',
    '438_fBodyGyro-min()-Z',
    '439_fBodyGyro-sma()',
    '440_fBodyGyro-energy()-X',
    '441_fBodyGyro-energy()-Y',
    '442_fBodyGyro-energy()-Z',
    '443_fBodyGyro-iqr()-X',
    '444_fBodyGyro-iqr()-Y',
    '445_fBodyGyro-iqr()-Z',
    '446_fBodyGyro-entropy()-X',
    '447_fBodyGyro-entropy()-Y',
    '448_fBodyGyro-entropy()-Z',
    '449_fBodyGyro-maxInds-X',
    '450_fBodyGyro-maxInds-Y',
    '451_fBodyGyro-maxInds-Z',
    '452_fBodyGyro-meanFreq()-X',
    '453_fBodyGyro-meanFreq()-Y',
    '454_fBodyGyro-meanFreq()-Z',
    '455_fBodyGyro-skewness()-X',
    '456_fBodyGyro-kurtosis()-X',
    '457_fBodyGyro-skewness()-Y',
    '458_fBodyGyro-kurtosis()-Y',
    '459_fBodyGyro-skewness()-Z',
    '460_fBodyGyro-kurtosis()-Z',
    '461_fBodyGyro-bandsEnergy()-1,8',
    '462_fBodyGyro-bandsEnergy()-9,16',
    '463_fBodyGyro-bandsEnergy()-17,24',
    '464_fBodyGyro-bandsEnergy()-25,32',
    '465_fBodyGyro-bandsEnergy()-33,40',
    '466_fBodyGyro-bandsEnergy()-41,48',
    '467_fBodyGyro-bandsEnergy()-49,56',
    '468_fBodyGyro-bandsEnergy()-57,64',
    '469_fBodyGyro-bandsEnergy()-1,16',
    '470_fBodyGyro-bandsEnergy()-17,32',
    '471_fBodyGyro-bandsEnergy()-33,48',
    '472_fBodyGyro-bandsEnergy()-49,64',
    '473_fBodyGyro-bandsEnergy()-1,24',
    '474_fBodyGyro-bandsEnergy()-25,48',
    '475_fBodyGyro-bandsEnergy()-1,8',
    '476_fBodyGyro-bandsEnergy()-9,16',
    '477_fBodyGyro-bandsEnergy()-17,24',
    '478_fBodyGyro-bandsEnergy()-25,32',
    '479_fBodyGyro-bandsEnergy()-33,40',
    '480_fBodyGyro-bandsEnergy()-41,48',
    '481_fBodyGyro-bandsEnergy()-49,56',
    '482_fBodyGyro-bandsEnergy()-57,64',
    '483_fBodyGyro-bandsEnergy()-1,16',
    '484_fBodyGyro-bandsEnergy()-17,32',
    '485_fBodyGyro-bandsEnergy()-33,48',
    '486_fBodyGyro-bandsEnergy()-49,64',
    '487_fBodyGyro-bandsEnergy()-1,24',
    '488_fBodyGyro-bandsEnergy()-25,48',
    '489_fBodyGyro-bandsEnergy()-1,8',
    '490_fBodyGyro-bandsEnergy()-9,16',
    '491_fBodyGyro-bandsEnergy()-17,24',
    '492_fBodyGyro-bandsEnergy()-25,32',
    '493_fBodyGyro-bandsEnergy()-33,40',
    '494_fBodyGyro-bandsEnergy()-41,48',
    '495_fBodyGyro-bandsEnergy()-49,56',
    '496_fBodyGyro-bandsEnergy()-57,64',
    '497_fBodyGyro-bandsEnergy()-1,16',
    '498_fBodyGyro-bandsEnergy()-17,32',
    '499_fBodyGyro-bandsEnergy()-33,48',
    '500_fBodyGyro-bandsEnergy()-49,64',
    '501_fBodyGyro-bandsEnergy()-1,24',
    '502_fBodyGyro-bandsEnergy()-25,48',
    '503_fBodyAccMag-mean()',
    '504_fBodyAccMag-std()',
    '505_fBodyAccMag-mad()',
    '506_fBodyAccMag-max()',
    '507_fBodyAccMag-min()',
    '508_fBodyAccMag-sma()',
    '509_fBodyAccMag-energy()',
    '510_fBodyAccMag-iqr()',
    '511_fBodyAccMag-entropy()',
    '512_fBodyAccMag-maxInds',
    '513_fBodyAccMag-meanFreq()',
    '514_fBodyAccMag-skewness()',
    '515_fBodyAccMag-kurtosis()',
    '516_fBodyBodyAccJerkMag-mean()',
    '517_fBodyBodyAccJerkMag-std()',
    '518_fBodyBodyAccJerkMag-mad()',
    '519_fBodyBodyAccJerkMag-max()',
    '520_fBodyBodyAccJerkMag-min()',
    '521_fBodyBodyAccJerkMag-sma()',
    '522_fBodyBodyAccJerkMag-energy()',
    '523_fBodyBodyAccJerkMag-iqr()',
    '524_fBodyBodyAccJerkMag-entropy()',
    '525_fBodyBodyAccJerkMag-maxInds',
    '526_fBodyBodyAccJerkMag-meanFreq()',
    '527_fBodyBodyAccJerkMag-skewness()',
    '528_fBodyBodyAccJerkMag-kurtosis()',
    '529_fBodyBodyGyroMag-mean()',
    '530_fBodyBodyGyroMag-std()',
    '531_fBodyBodyGyroMag-mad()',
    '532_fBodyBodyGyroMag-max()',
    '533_fBodyBodyGyroMag-min()',
    '534_fBodyBodyGyroMag-sma()',
    '535_fBodyBodyGyroMag-energy()',
    '536_fBodyBodyGyroMag-iqr()',
    '537_fBodyBodyGyroMag-entropy()',
    '538_fBodyBodyGyroMag-maxInds',
    '539_fBodyBodyGyroMag-meanFreq()',
    '540_fBodyBodyGyroMag-skewness()',
    '541_fBodyBodyGyroMag-kurtosis()',
    '542_fBodyBodyGyroJerkMag-mean()',
    '543_fBodyBodyGyroJerkMag-std()',
    '544_fBodyBodyGyroJerkMag-mad()',
    '545_fBodyBodyGyroJerkMag-max()',
    '546_fBodyBodyGyroJerkMag-min()',
    '547_fBodyBodyGyroJerkMag-sma()',
    '548_fBodyBodyGyroJerkMag-energy()',
    '549_fBodyBodyGyroJerkMag-iqr()',
    '550_fBodyBodyGyroJerkMag-entropy()',
    '551_fBodyBodyGyroJerkMag-maxInds',
    '552_fBodyBodyGyroJerkMag-meanFreq()',
    '553_fBodyBodyGyroJerkMag-skewness()',
    '554_fBodyBodyGyroJerkMag-kurtosis()',
    '555_angle(tBodyAccMean,gravity)',
    '556_angle(tBodyAccJerkMean),gravityMean)',
    '557_angle(tBodyGyroMean,gravityMean)',
    '558_angle(tBodyGyroJerkMean,gravityMean)',
    '559_angle(X,gravityMean)',
    '560_angle(Y,gravityMean)',
    '561_angle(Z,gravityMean)']

# get training data and target variable from zip file
with zipfile.ZipFile(data_train) as myzip:
    a = sorted(myzip.namelist())
    with myzip.open('UCI HAR Dataset/train/X_train.txt') as myfile:
        df_x = pandas.read_csv(io.BytesIO(myfile.read()), delimiter = '\s+', header = None, names = columns)

    with myzip.open('UCI HAR Dataset/train/y_train.txt') as myfile:
        df_y = pandas.read_csv(io.BytesIO(myfile.read()), header = None, names = ['activity_label'])

# merge y with other x variables
df_total = df_y.merge(df_x, how = 'left', left_index = True, right_index = True)

# multiply x variable by 100000000, most of the x values become integer number, which would be better for modeling
for i in df_total.columns:
    if i != 'activity_label':
        df_total[i] = df_total[i] * 100000000

# original activity_label: 1=WALKING, 2=WALKING_UPSTAIRS, 3=WALKING_DOWNSTAIRS, 4=SITTING, 5=STANDING, 6=LAYING
# we are predicting whether a mobile phone user is LAYING or not, so we set "6" (LAYING) to 1 and the others to 0
df_total['target_activity_label'] = df_total['activity_label'].apply(lambda x: 1 if x == 6 else 0)
df_total = df_total.drop('activity_label', axis = 1)

# save the dataframe as CSV file, you can zip it, upload it to t1modeler.com, and build a model
df_total.to_csv('uci_003_human_activity_recognition.csv', index = False)
